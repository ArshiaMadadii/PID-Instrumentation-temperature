;/*
; * PID - Instrumentation
; *
; * Author:ArshiaMadadi
; */
;//LIB
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <mega32.h>
;#include <delay.h>
;#include <lcd.h>
;#include <stdio.h> //scaf,printf
;
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x15 ;PORTC
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 000F #endasm
;
;//Variable definition
;    char buffer[64];
;    float SP=100,temp,error,last_error,last_iterm,kp=.025,ki=.0000075,kd=1;//sp(0,100)

	.DSEG
;    float pterm,iterm,dterm,D;
;    unsigned int  D2,LD,HD;
;
;//ADC interrupt
;    interrupt [ADC_INT] void adc_isr(void){
; 0000 0018 interrupt [17] void adc_isr(void){

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0019         unsigned int adc_data;
; 0000 001A         adc_data=ADCW;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;	adc_data -> R16,R17
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 001B         temp=(adc_data*2.56)/1023;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 001C         temp=temp*100;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 001D     }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;
;
;
; void main(void){
; 0000 0022 void main(void){
;PCODE: $00000026 VOL: 0
; 0000 0023     lcd_init(16);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0024 
; 0000 0025 
; 0000 0026  //adc
; 0000 0027     GICR|=0x40;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0028     MCUCR=0x02;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0029     MCUCSR=0x00;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 002A     GIFR=0x40;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 002B     ADMUX=0xC0;  //ch=0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002C     ADCSRA=0x8D;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 002D     #asm("sei")
;PCODE: $00000036 VOL: 0
	sei
;PCODE: $00000037 VOL: 0
; 0000 002E     ADCSRA=0xCD;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 002F 
; 0000 0030    while(1){
;PCODE: $0000003A VOL: 0
; 0000 0031             error=SP-temp;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0032             pterm=kp*error;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0033             iterm=(ki*error)+last_iterm;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0034             dterm=(error-last_error)*kd;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0035             D=(pterm+iterm+dterm)*100;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0036             if(D<1) D=1;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0037             if(D>1020) D=1020; //D=1020 MAX <0OCR Timer>
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0038             last_iterm=iterm;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0039             last_error=error;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 003A             D2=D;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 003B             HD=D2/256;  //change to 8 Bit
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 003C             LD=D2%256;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 003D 
; 0000 003E     DDRD.4=1;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 003F     DDRD.5=1;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0040     TCCR1A=0xE3;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0041     TCCR1B=0x0C;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0042     TCNT1H=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0043     TCNT1L=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0044     ICR1H=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0045     ICR1L=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0046     OCR1AH=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0047     OCR1AL=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0048     OCR1BH=HD;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0049     OCR1BL=LD;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 004A 
; 0000 004B     sprintf(buffer,"T=%3.1f SP=%2.1f \nKp=%f \nKi=%f \nKd=%f",temp,SP,pterm,iterm,dterm);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 004C     lcd_clear();
;PCODE: $0000009D VOL: 0
; 0000 004D     lcd_puts(buffer);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 004E     delay_ms(200);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 004F     ADCSRA=0xCD;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0050    }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0051  }
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
